{
	"info": {
		"_postman_id": "5b42d17e-f891-40f4-b605-8af00cf3c83f",
		"name": "GraphQL API - GITHUB",
		"description": "[https://docs.github.com/en/graphql/overview/explorer](https://docs.github.com/en/graphql/overview/explorer)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2290091",
		"_collection_link": "https://grey-rocket-97985.postman.co/workspace/HONL-PTC-TEAM~50115501-25e6-4891-9b1b-dbdc95ab3198/collection/2290091-5b42d17e-f891-40f4-b605-8af00cf3c83f?action=share&source=collection_link&creator=2290091"
	},
	"item": [
		{
			"name": "1-Github- Retrieve current user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"Verify that Loginid returns correctly\", function () {\r",
							"     var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.data.viewer.login).equal(\"nlongho\");\r",
							"});\r",
							"// Add a performance test to check if the response time is lower than 200ms\r",
							"pm.test(\"Response time is less than 800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"// Test to check for proper authentication and authorization\r",
							"pm.test(\"Valid authentication and authorization\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.viewer).to.have.property('login').that.is.a('string').and.to.have.length.above(0);\r",
							"});\r",
							"\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Login</th>\r",
							"        <th>Name</th>\r",
							"        <th>Email</th>\r",
							"        <th>Website</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.data.viewer.login}}</td>\r",
							"        <td>{{response.data.viewer.name}}</td>\r",
							"        <td>{{response.data.viewer.email}}</td>\r",
							"        <td>{{response.data.viewer.websiteUrl}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  viewer {\r\n    login\r\n    name\r\n    bio\r\n    email\r\n    websiteUrl\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-Github-CREATE A REPOSITORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Name</th>\r",
							"        <th>URL</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.data.createRepository.repository.id}}</td>\r",
							"        <td>{{response.data.createRepository.repository.name}}</td>\r",
							"        <td>{{response.data.createRepository.repository.url}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// let now = new Date();\r",
							"// let formattedTimestamp = now.toISOString().slice(0, 19).replace('T', ' ');\r",
							"// pm.environment.set(\"timestamp_var\", formattedTimestamp);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateRepository {\r\n  createRepository(input: {\r\n    name: \"{{rep_name}}_{{$timestamp}}\"\r\n    # Add other fields as needed, such as:\r\n    # description: \"This is a test repository\"\r\n    visibility: PUBLIC\r\n  }) {\r\n    repository {\r\n      id\r\n      name\r\n      url\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-Github-Lookup a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>User Name</th>\r",
							"        <th>Email</th>\r",
							"        <th>Profile URL</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.data.user.name}}</td>\r",
							"        <td>{{response.data.user.email}}</td>\r",
							"        <td>{{response.data.user.url}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const lookup_userid = pm.iterationData.get(\"lookup_userid\");\r",
							"console.log(\"Looking up a userid:\", lookup_userid);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query {\r\n  user(login:\"{{lookup_userid}}\") {\r\n    name\r\n    email\r\n    url\r\n     repositories(first: 100, affiliations: [OWNER, ORGANIZATION_MEMBER, COLLABORATOR], ownerAffiliations: [OWNER, ORGANIZATION_MEMBER, COLLABORATOR])\r\n {\r\n      nodes {\r\n        name\r\n        url\r\n        description\r\n        primaryLanguage {\r\n          name\r\n        }\r\n        stargazers {\r\n          totalCount\r\n        }\r\n        forks {\r\n          totalCount\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	]
}